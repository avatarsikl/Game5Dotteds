{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["// возвращает player на каждый клик\r\nclass Queue { \r\n    private counter: Counter = new Counter(this.players.length);\r\n    constructor(private players: string[]) {};\r\n    \r\n    getGamer():string {\r\n        return this.players[this.counter.getplayerNumber()];\r\n    }\r\n\r\n}\r\n// возвращает числа с 0 до  players[].length\r\nclass Counter {\r\n    private count: number = null;\r\n    constructor(private amountPlayers: number) {}\r\n    getplayerNumber():number {\r\n        if (this.count === null) {\r\n            this.count = 0;\r\n        } else {\r\n            this.count++;\r\n            if (this.count >= this.amountPlayers) this.count = 0;\r\n        }\r\n        return this.count;\r\n    }\r\n}\r\n\r\n//хранилище всех точек по координатам \r\nclass Dots {\r\n    public dots: object = {};\r\n\r\n    // добавляет dot с заданными коорд {1 : {1: Dot, 5: Dot}, 2: {1:Dot}...}\r\n    add(dot, row, col):void {\r\n        if (this.dots[row] === undefined) {\r\n            this.dots[row] = {};\r\n        }\r\n        this.dots[row][col] = dot;\r\n    }\r\n    \r\n    // возвращает Dot по заданным коорд.\r\n    get(row, col) {\r\n        if (this.dots[row] && this.dots[row][col]) {\r\n            return this.dots[row][col]\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n}\r\n\r\n// класс точек\r\nclass Dot {\r\n    private neighbors = {}; //соседи {-1: {1: Dot, 0: Dot,} 0: {...}}\r\n    constructor(\r\n        private player: string,\r\n        private elem: HTMLElement, \r\n        public readonly row: number, \r\n        public readonly col: number,\r\n        private dots: Dots,\r\n    ) {\r\n        this.reflect();\r\n    }\r\n\r\n    becomeWinner():void {\r\n        this.elem.classList.add('winner');\r\n    }\r\n\r\n    getNeighbor(deltRow, deltaCol) {\r\n        if (this.neighbors[deltRow] !== undefined) {\r\n            return this.neighbors[deltRow][deltaCol]\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    // добавляет соседа по смещению delta (1)\r\n    addNeighbor(neighbor) {\r\n        let deltaRow = neighbor.row - this.row;\r\n        let deltaCol = neighbor.col - this.col;\r\n\r\n        if (this.neighbors[deltaRow] === undefined) {\r\n            this.neighbors[deltaRow] = {}\r\n        }\r\n        this.neighbors[deltaRow][deltaCol] = neighbor;\r\n    }\r\n\r\n    // проверяет одинаковый класс или нет\r\n    belongsTo(player):boolean {\r\n        return this.player === player;\r\n    }\r\n\r\n    // проверяет наличие соседа в заданной точке которая берется из хранилища (2)\r\n    considerNeighbor(deltaRow, deltaCol) {\r\n        let neighbor = this.dots.get(this.row - deltaRow, this.col - deltaCol);\r\n\r\n        if (neighbor !== undefined && neighbor.belongsTo(this.player)) {\r\n            this.addNeighbor(neighbor);\r\n            this.notifyNeighbors();\r\n        }\r\n    }\r\n\r\n    // ищет всех соседей вокруг (3)\r\n    findNeighbors() {\r\n        this.considerNeighbor(1, 1);\r\n        this.considerNeighbor(1, 0);\r\n        this.considerNeighbor(1, -1);\r\n        this.considerNeighbor(-1, 1);\r\n        this.considerNeighbor(-1, 0);\r\n        this.considerNeighbor(-1, -1);\r\n        this.considerNeighbor(0, 1);\r\n        this.considerNeighbor(0, -1);\r\n    }\r\n\r\n    notifyNeighbors() {\r\n        for (let rowKey in this.neighbors) {\r\n            for (let colKey in this.neighbors[rowKey]) {\r\n                this.neighbors[rowKey][colKey].addNeighbor(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    reflect():void {\r\n        this.elem.classList.add('gamer');\r\n        this.elem.classList.add(this.player);\r\n        this.findNeighbors();\r\n    }\r\n\r\n\r\n}\r\n// класс для взаимодействия с DOM элементами\r\nclass HTML {\r\n    constructor() {}\r\n    createField(anchor: HTMLElement, colsNum:number, rowsNum:number):HTMLElement {\r\n        const table:HTMLElement = document.createElement('table');\r\n        for (let i = 0; i < rowsNum; i++) {\r\n            let tr = document.createElement('tr');\r\n            for (let j = 0; j < colsNum; j++) {\r\n                let td = document.createElement('td');\r\n                tr.append(td);\r\n            }\r\n            table.append(tr);\r\n        }\r\n        anchor.append(table);\r\n        return table;\r\n    }\r\n    \r\n    getPrevSiblingsNum(elem) {\r\n        let prev = elem.previousElementSibling;\r\n        let i = 0;\r\n        while(prev) {\r\n            prev = prev.previousElementSibling;\r\n            i++;\r\n        }\r\n\r\n        return i;\r\n    }\r\n}\r\n\r\nclass Field {\r\n    private DOManchor: HTMLElement; // якорь для таблицы\r\n    private field: HTMLElement; \r\n    private endGame: boolean = false;\r\n    \r\n    private html: HTML = new HTML;\r\n    private dots: Dots = new Dots;\r\n    private queue: Queue = new Queue(['gamer1', 'gamer2']);\r\n\r\n    constructor(anchor: string | HTMLElement, private colsNum:number, private rowsNum:number ) {\r\n        this.DOManchor = typeof anchor === 'string' ? \r\n        document.querySelector(`.${anchor}`) \r\n        : anchor;\r\n        this.render(); // отрисовка таблицы\r\n        this.handle(); // навешываем обработчик на таблицу\r\n    }\r\n    private render():void {\r\n        this.field = this.html.createField(this.DOManchor, this.colsNum, this.rowsNum);\r\n    }\r\n    private handle():void {\r\n        this.field.addEventListener('click', (e) => {\r\n            let cell =  e.target.closest('td:not(.gamer)');\r\n            if (!this.endGame && cell) { //если игра не закончена и клик был на ячейке\r\n                let col = this.html.getPrevSiblingsNum(cell);\r\n                let row = this.html.getPrevSiblingsNum(cell.parentElement);\r\n\r\n                let player = this.queue.getGamer();\r\n\r\n                let dot = new Dot(player, cell, row, col, this.dots);\r\n                this.dots.add(dot, row , col);\r\n                console.log(this.dots);\r\n                let winLine = this.checkWin(dot);\r\n                if (winLine) {\r\n                    this.win(winLine);\r\n                }\r\n            }     \r\n        })\r\n    }\r\n\r\n    win(winLine) {\r\n        this.endGame = true;\r\n        this.notyfyWinnerCells(winLine);\r\n    }\r\n\r\n    notyfyWinnerCells(winLine) {\r\n        winLine.forEach(dot => {\r\n            dot.becomeWinner();\r\n        });\r\n    }\r\n\r\n    private checkWin(dot) {\r\n        let dirs = [\r\n            {deltaRow: 0, deltaCol: -1},\r\n            {deltaRow: -1, deltaCol: -1},\r\n            {deltaRow: -1, deltaCol: 0},\r\n            {deltaRow: -1, deltaCol: 1},\r\n        ]\r\n\r\n        for (let i = 0; i < dirs.length; i++) {\r\n            let line = this.checkLine(dot, dirs[i].deltaRow, dirs[i].deltaCol)\r\n\r\n            if (line.length >= 5) {\r\n                return line;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private checkLine(dot, deltaRow, deltaCol) {\r\n        let dir1 = this.checkDir(dot, deltaRow, deltaCol);\r\n        let dir2 = this.checkDir(dot, -deltaRow, -deltaCol);\r\n\r\n        return [].concat(dir1, [dot], dir2);\r\n    }\r\n    private checkDir(dot, deltaRow, deltaCol): any[] {\r\n        let result = [];\r\n        let neighbor = dot;\r\n\r\n        while (true) {\r\n            neighbor = neighbor.getNeighbor(deltaRow, deltaCol);\r\n\r\n            if (neighbor) {\r\n                result.push(neighbor);\r\n            } else {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlet filed = new Field('game', 15, 15);\r\n\r\n"]}